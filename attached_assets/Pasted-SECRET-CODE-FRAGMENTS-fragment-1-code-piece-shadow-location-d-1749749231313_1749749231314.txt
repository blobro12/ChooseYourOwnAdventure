SECRET_CODE_FRAGMENTS = {
    "fragment_1": {
        "code_piece": "shadow",
        "location": "dragons_heart", 
        "trigger_word": "journey",  # Word in dragons_heart story text
        "discovery_text": "The ancient runes on the cave wall glow briefly, revealing the word: 'SHADOW'",
        "hint": "You sense this word is part of something larger...",
        "sound": "mystical_chime"
    },
    "fragment_2": {
        "code_piece": "nexus", 
        "location": "echodiver",
        "trigger_word": "asleep",  # Word in echodiver story text
        "discovery_text": "The dream technology panel flickers and displays a cryptic message: 'NEXUS'",
        "hint": "This seems like a key piece of a puzzle...",
        "sound": "electronic_beep"
    },
    "fragment_3": {
        "code_piece": "gate",
        "location": "docks",
        "trigger_word": "letter",  # Word in docks story text
        "discovery_text": "You examine the victim's letter more closely and notice faint writing on the back: 'GATE'",
        "hint": "Three words... but how many more are there?",
        "sound": "discovery_bell"
    },
    "fragment_4": {
        "code_piece": "walker",
        "location": "noexecuted", 
        "trigger_word": "Debtors",  # Word in noexecuted ending text
        "discovery_text": "Hidden in the traitor's confession, you discover a coded message: 'WALKER'",
        "hint": "Four words now... try combining them to form a secret path!",
        "sound": "treasure_chime"
    }
}

def make_words_clickable(text, node_id, session_id, session):
    """Convert trigger words in story text to clickable elements"""
    # Find if this node has any secret fragments
    available_fragments = []
    for frag_id, frag_data in SECRET_CODE_FRAGMENTS.items():
        if (frag_data["location"] == node_id and 
            frag_id not in session["code_fragments"]):
            available_fragments.append((frag_id, frag_data))

    if not available_fragments:
        return text

    # Process each fragment
    for frag_id, frag_data in available_fragments:
        trigger_word = frag_data["trigger_word"]

        # Create clickable span for the trigger word (case insensitive)
        import re
        pattern = r'\b(' + re.escape(trigger_word) + r')\b'

        def replace_word(match):
            word = match.group(1)
            return f'<span class="secret-word" data-fragment="{frag_id}" data-session="{session_id}" data-node="{node_id}" data-sound="{frag_data["sound"]}" onclick="discoverSecretFragment(this)">{word}</span>'

        text = re.sub(pattern, replace_word, text, flags=re.IGNORECASE)

    return text

# User state tracking (in production, use a database)
user_sessions = {}

def get_user_session(session_id="default"):
    if session_id not in user_sessions:
        user_sessions[session_id] = {
            "current_node": "start",
            "choices_made": [],
            "story_path": ["start"],
            "code_fragments": [],  # Track found code pieces
            "secret_attempts": 0   # Track how many times they've tried
        }
    return user_sessions[session_id]

def update_user_session(session_id, node_id, choice_made):
    session = get_user_session(session_id)
    session["current_node"] = node_id
    session["choices_made"].append(choice_made)
    session["story_path"].append(node_id)
    return session

def create_progress_hints(session):
    """Create helpful hints based on progress"""
    fragment_count = len(session["code_fragments"])

    if fragment_count == 0:
        return P("🔍 Hint: Look for words that seem to shimmer with hidden meaning as you explore...", 
                style="font-style: italic; color: #9b59b6; font-size: 14px;")
    elif fragment_count == 1:
        return P("🧩 You've found your first piece! Keep exploring different story paths to find more fragments.", 
                style="font-style: italic; color: #27ae60; font-size: 14px;")
    elif fragment_count == 2:
        return P("🔗 Two fragments collected! Try combining them: /fragment1-fragment2-...", 
                style="font-style: italic; color: #f39c12; font-size: 14px;")
    elif fragment_count == 3:
        return P("⚡ Almost there! One more fragment to unlock the secret path!", 
                style="font-style: italic; color: #e74c3c; font-size: 14px;")
    else:
        return P("🚪 All fragments found! Navigate to: /shadow-nexus-gate-walker", 
                style="font-weight: bold; color: #8e44ad; font-size: 16px;")

# Modified story page with enhanced secret system
@rt("/story")
def story_page(node: str = "start", session_id: str = "default"):
    session = get_user_session(session_id)
    current_node = STORY_NODES.get(node, STORY_NODES["start"])

    # Process story content to make trigger words clickable
    story_content = make_words_clickable(current_node["content"], node, session_id, session)

    # Create choice buttons
    choice_buttons = []
    for choice in current_node["choices"]:
        choice_buttons.append(
            Button(
                choice["text"],
                type="submit",
                name="choice", 
                value=choice["choice_id"],
                style="display: block; width: 100%; margin: 10px 0; padding: 15px; text-align: left; background: #2c3e50; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 16px;"
            )
        )

    # Code fragments display
    fragments_display = ""
    if session["code_fragments"]:
        fragment_codes = [SECRET_CODE_FRAGMENTS[frag_id]["code_piece"].upper() 
                         for frag_id in session["code_fragments"]]

        fragments_display = Div(
            H4("🔍 Code Fragments Found:"),
            Div(
                *[Span(code, style="background: #34495e; color: white; padding: 5px 10px; margin: 0 5px; border-radius: 3px; font-family: monospace;") 
                  for code in fragment_codes]
            ),
            P(f"{len(session['code_fragments'])}/4 fragments discovered"),
            P("💡 Try combining these words to form a secret path: /word1-word2-word3-word4", 
              style="font-style: italic; color: #7f8c8d; font-size: 14px;") if len(session['code_fragments']) >= 2 else "",
            P("🚪 Enter the complete path in your browser's address bar!", 
              style="font-weight: bold; color: #e74c3c;") if len(session['code_fragments']) >= 3 else "",
            style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 5px; border-left: 4px solid #9b59b6;"
        )

    return Titled(current_node["title"],
        # Enhanced CSS with sound and animation effects
        Style("""
            .secret-word {
                position: relative;
                cursor: pointer;
                transition: all 0.3s ease;
                color: #8e44ad;
                font-weight: bold;
                border-bottom: 2px dotted #9b59b6;
                padding: 2px 4px;
                border-radius: 3px;
            }

            .secret-word:hover {
                background: rgba(155, 89, 182, 0.1);
                color: #663399;
                text-shadow: 0 0 8px rgba(155, 89, 182, 0.6);
                transform: scale(1.05);
                box-shadow: 0 0 15px rgba(155, 89, 182, 0.3);
            }

            .secret-word.clicked {
                animation: secretReveal 0.8s ease-out;
                background: linear-gradient(45deg, #9b59b6, #8e44ad);
                color: white;
                border: none;
            }

            @keyframes secretReveal {
                0% { transform: scale(1); }
                50% { transform: scale(1.2); box-shadow: 0 0 20px rgba(155, 89, 182, 0.8); }
                100% { transform: scale(1); }
            }

            .code-fragment {
                font-family: 'Courier New', monospace;
                background: #2c3e50;
                color: #ecf0f1;
                padding: 2px 6px;
                border-radius: 3px;
                font-weight: bold;
            }

            .discovery-popup {
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: white;
                padding: 30px;
                border-radius: 15px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.5);
                z-index: 1000;
                max-width: 500px;
                text-align: center;
                border: 3px solid #9b59b6;
            }

            .discovery-overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.7);
                z-index: 999;
            }
        """),

        # JavaScript for handling clicks and sound
        Script("""
            function discoverSecretFragment(element) {
                // Add clicked animation
                element.classList.add('clicked');

                // Create discovery popup
                showDiscoveryPopup(element);

                // Make AJAX call to register discovery
                const fragment = element.dataset.fragment;
                const sessionId = element.dataset.session;
                const node = element.dataset.node;

                fetch(`/discover_fragment_ajax?fragment=${fragment}&session_id=${sessionId}&node=${node}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Remove clickability after discovery
                            element.onclick = null;
                            element.style.cursor = 'default';
                            element.title = 'Fragment already discovered';
                        }
                    })
                    .catch(error => console.error('Error:', error));
            }

            function showDiscoveryPopup(element) {
                const fragment = element.dataset.fragment;
                const fragmentData = {
                    'fragment_1': {
                        code: 'SHADOW',
                        text: 'The ancient runes on the cave wall glow briefly, revealing the word: SHADOW',
                        hint: 'You sense this word is part of something larger...'
                    },
                    'fragment_2': {
                        code: 'NEXUS',
                        text: 'The dream technology panel flickers and displays a cryptic message: NEXUS',
                        hint: 'This seems like a key piece of a puzzle...'
                    },
                    'fragment_3': {
                        code: 'GATE',
                        text: 'You examine the victim\\'s letter more closely and notice faint writing on the back: GATE',
                        hint: 'Three words... but how many more are there?'
                    },
                    'fragment_4': {
                        code: 'WALKER',
                        text: 'Hidden in the traitor\\'s confession, you discover a coded message: WALKER',
                        hint: 'Four words now... try combining them to form a secret path!'
                    }
                };

                const data = fragmentData[fragment];
                if (!data) return;

                // Create overlay
                const overlay = document.createElement('div');
                overlay.className = 'discovery-overlay';

                // Create popup
                const popup = document.createElement('div');
                popup.className = 'discovery-popup';
                popup.innerHTML = `
                    <h2 style="color: #9b59b6; margin-bottom: 20px;">🔍 Secret Fragment Discovered!</h2>
                    <p style="font-size: 16px; margin-bottom: 15px;">${data.text}</p>
                    <p style="margin-bottom: 10px;">Code Fragment: <span class="code-fragment">${data.code}</span></p>
                    <p style="font-style: italic; color: #7f8c8d; margin-bottom: 20px;">${data.hint}</p>
                    <button onclick="closeDiscoveryPopup()" style="background: #9b59b6; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; font-size: 16px;">Continue Exploring</button>
                `;

                document.body.appendChild(overlay);
                document.body.appendChild(popup);

                // Auto-close after 5 seconds
                setTimeout(() => {
                    closeDiscoveryPopup();
                }, 5000);
            }

            function closeDiscoveryPopup() {
                const overlay = document.querySelector('.discovery-overlay');
                const popup = document.querySelector('.discovery-popup');
                if (overlay) overlay.remove();
                if (popup) popup.remove();

                // Refresh the page to update fragment display
                location.reload();
            }
        """),

        Div(
            H2(current_node["title"], style="color: #34495e; margin-bottom: 20px;"),

            # Story content with clickable words
            Div(
                # Use raw HTML for the processed content
                HTML(f'<p style="line-height: 1.6; margin-bottom: 30px; white-space: pre-line;">{story_content}</p>'),
                id="story-content"
            ),

            # Code fragments display
            fragments_display,

            # Choices form
            Form(
                *choice_buttons,
                Input(type="hidden", name="current_node", value=node),
                Input(type="hidden", name="session_id", value=session_id),
                action="/make_choice",
                method="post"
            ),

            # Hint for secret words
            P("👁️ Some words seem to shimmer with hidden meaning...", 
              style="font-style: italic; color: #9b59b6; font-size: 14px; margin-top: 20px;") if any(
                  frag["location"] == node and frag_id not in session["code_fragments"] 
                  for frag_id, frag in SECRET_CODE_FRAGMENTS.items()
              ) else "",

            style="max-width: 800px; margin: 0 auto; padding: 20px;"
        ),

        # Progress indicator
        Div(
            H4("Your Journey:"),
            P(" → ".join([STORY_NODES[n]["title"] for n in session["story_path"] if n in STORY_NODES])),
            style="margin-top: 40px; padding: 20px; background: #ecf0f1; border-radius: 5px;"
        ) if len(session["story_path"]) > 1 else "",

        # Navigation
        Div(
            A("Start Over", href="/restart", style="margin-right: 20px;"),
            A("Story Map", href="/map"),
            style="margin-top: 20px; text-align: center;"
        )
    )

# AJAX endpoint for fragment discovery
@rt("/discover_fragment_ajax")
def discover_fragment_ajax(fragment: str, session_id: str, node: str):
    session = get_user_session(session_id)

    if fragment in SECRET_CODE_FRAGMENTS and fragment not in session["code_fragments"]:
        session["code_fragments"].append(fragment)
        return {"success": True, "fragments_found": len(session["code_fragments"])}

    return {"success": False}
